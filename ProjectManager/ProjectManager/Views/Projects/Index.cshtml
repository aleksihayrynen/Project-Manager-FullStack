@model List<ProjectWithTaskViewModel>
@using ProjectManager.Models.Utils;
@using ProjectManager.Models.Services;
@using ProjectManager.Models.ViewModels;
@using MongoDB.Bson;

<div class="button_parent" style="position:relative;">
    <div class="AddItem_div">
        <div class="project_search_group">
            <input class="project_searchbar" />
            <svg class="search_icon" xmlns="http://www.w3.org/2000/svg" height="20px" viewBox="0 -960 960 960" width="20px" fill="#000000"><path d="M765-144 526-383q-30 22-65.79 34.5-35.79 12.5-76.18 12.5Q284-336 214-406t-70-170q0-100 70-170t170-70q100 0 170 70t70 170.03q0 40.39-12.5 76.18Q599-464 577-434l239 239-51 51ZM384-408q70 0 119-49t49-119q0-70-49-119t-119-49q-70 0-119 49t-49 119q0 70 49 119t119 49Z" /></svg>
        </div>

        <button type="button" class="btn btn-success" id="showModalButton">
            New Project
        </button>
    </div>
</div>

<div id="modalContainer"></div>

<div class="project_container">
    @foreach (var project in Model)
    {
        <a class="project_link" asp-action="Details" asp-controller="Projects" asp-route-project_id="@project.Project._id" asp-route-project_title="@project.Project.Title">
            <div class="project_div">
                <div class="project_link_container">
                    <h2>@UtilityFunctions.CapitalizeFirstLetter(project.Project.Title)</h2>
                    <p class="project_subtitle">@((project.Project.Description) ?? "No Description") </p>
                    <div class="Members_owner">
                        <div class="Members">
                            <p>Members: @project.Project.Members.Count</p>
                            <div class="picture_rower">
                                @for (var i = 0; i < Math.Min(project.Project.Members.Count, 3); i++)
                                {
                                    <div class="profilepicture_container">
                                        <img class="profile_picture" src="/Media/flover.png" />
                                    </div>
                                }
                                @if (project.Project.Members.Count - 3 > 0)
                                {
                                    <p id="member_extra">+ @(project.Project.Members.Count - 3)</p>
                                }
                            </div>
                            <div class="Assigned_tasks">
                                <p id="assigned_task_text">Assigned Task's: @project.AssignedTask</p>
                            </div>
                        </div>
                        <div class="Owner">
                            <p>Owner:</p>
                                <div class="profilepicture_container">
                                    <img class="profile_picture" src="/Media/flover.png" />
                                </div>
                            <div class="Review">
                                @if (project.Project.UseReview == false)
                                {
                                    <p id="Review_false_text"></p>
                                }
                                else
                                {
                                    <p id="Review_text">In Review: @project.TaskInReview</p>
                                }
                            </div>
                        </div> 
                        
                    </div>
                    
                        <p id="Late_task_text">Late task: @project.LateTask</p>
                        <p class="Next_due_task">
                            Next due task: @(project.NextTaskDueDate?.ToString("yyyy-MM-dd") ?? " -")
                        </p>

                </div>
            </div>
        </a>
    }
</div>


@section Scripts {

    <script>
            $(document).ready(function () {
            $(document).on('click', '.toggle-btn', function () {
                var value = $(this).data('value');
                var target = $(this).data('target');
                console.log(this.data);

                // Set the hidden input value
                $('#' + target).val(value);

                // Remove active class from both buttons in the same group
                $(this).siblings('.toggle-btn').removeClass('active');
                // Add active class to clicked button
                $(this).addClass('active');
            });
        });

        $(document).ready(function () {
            function loadModal() {
                $.get('@Url.Action("addProjectModal", "Projects")', function (response) {
                    $('#modalContainer').html(response);
                    $('#addProjectModal').modal('show');
                });
            }

            // Load modal on button click
            $('#showModalButton').click(loadModal);


            // Delegate the form submission to dynamically loaded content
            $('#modalContainer').on('submit', '#addProjectform', function (e) {
                e.preventDefault();
                var form = $(this);
                console.log(form);

                $.ajax({
                    url: '@Url.Action("AddProject", "Projects")',
                    type: 'POST',
                    data: form.serialize(),
                    success: function (response) {
                    if (response.success) {
                        $('#addProjectModal').modal('hide');
                        location.reload();
                    } else {
                        // Clean up old modal + backdrop
                        $('.modal-backdrop').remove();
                        $('#addProjectModal').modal('hide');
                        $('#addProjectModal').remove();

                        // Inject updated modal with errors
                        $('#modalContainer').html(response);
                        $('#addProjectModal').modal('show');
                    }
                }
                });
            });
        });
    </script>

}
