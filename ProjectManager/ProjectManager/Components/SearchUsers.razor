@inject GetProjectsService _getProjectsService
@using ProjectManager.Models.ViewModels
@using ProjectManager.Models.Services
@using ProjectManager.Models
@using ProjectManager.Models.Utils
@using MongoDB.Bson

<div class="invite-modal">
    <h3 id="inviteModal_title">Invite Users</h3>
    <input id="invite_searchbar" type="text"
    class="form-control"
    placeholder="Search by name or email..."
    @bind="searchText"
    @bind:event="oninput" />

    @if (searchResults.Any())
    {
        <ul class="list-group">
            @foreach (var user in searchResults)
            {
                <li class="list-group-item found-people" @onclick="() => AddUser(user)">
                    <div class="profilepicture_container_search">
                        <img class="profile_picture" src="/Media/flover.png" />
                    </div>
                    <p>
                        @UtilityFunctions.CapitalizeFirstLetter(user.Username) (@UtilityFunctions.CapitalizeFirstLetter(user.FirstName) @UtilityFunctions.CapitalizeFirstLetter(user.LastName))
                    </p>
                </li>
            }
        </ul>
    }
    else if (_searchText.Length >= 1)
    {
        <ul class="list-group">
            <li class="list-group-item">
                0 people found
            </li>
        </ul>
    }

    @if (selectedUsers.Any())
    {
        <div class="mt-3">
            <strong>Users to invite:</strong>
            <div class="selected-user-list">
                @foreach (var user in selectedUsers)
                {
                    <span class="badge bg-primary me-2">
                        @user.Username
                        <button type="button" class="btn-close btn-close-white btn-sm ms-2" @onclick="() => RemoveUser(user)" />
                    </span>
                }
            </div>
        </div>
    }

    <button id="send_invite_button" class="btn btn-success mt-3" @onclick="SubmitInvites">Invite</button>
</div>

@code {
    private List<UserSearchList> searchResults = new();
    private List<UserSearchList> selectedUsers = new();

    private CancellationTokenSource debounceCts;
    private const int DebounceDelay = 300; // milliseconds

    [Parameter]
    public string ProjectId { get; set; }
    private List<ProjectMembers> CurrentMembers = new();

    private string _searchText = "";
    private string searchText
    {
        get => _searchText;
        set
        {
            if (_searchText != value)
            {
                _searchText = value;
                DebounceSearch(); // debounce logic
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(ProjectId))
        {
            var project = await MongoManipulator.GetObjectById<Project>(ObjectId.Parse(ProjectId));
            if (project != null)
            {
                CurrentMembers = project.Members;
            }
        }
    }

    private void DebounceSearch()
    {
        debounceCts?.Cancel(); // cancel the last one if still running
        debounceCts = new CancellationTokenSource();

        var token = debounceCts.Token;

        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(DebounceDelay, token);
                if (!token.IsCancellationRequested)
                {   
                    await InvokeAsync(OnSearchChanged);
                }
            }
            catch (TaskCanceledException)
            {

            }
        });
    }

    private async Task OnSearchChanged()
    {
        if (searchText.Length >= 1)
        {
            Console.WriteLine("Searching for: " + searchText);

            var excludeUserIds = new List<ObjectId>();

            // Add current project members
            if (CurrentMembers != null)
                excludeUserIds.AddRange(CurrentMembers.Select(m => m.UserId));

            // Add already selected users
            if (selectedUsers != null)
                excludeUserIds.AddRange(selectedUsers.Select(u => u.UserId));

            // Remove duplicates
            excludeUserIds = excludeUserIds.Distinct().ToList();

            // Call the backend search
            var foundUsers = await _getProjectsService.SearchByUsernameOrEmail(searchText, excludeUserIds);

            searchResults = foundUsers;
        }
        else
        {
            searchResults.Clear();
        }

        StateHasChanged();
    }

    private void AddUser(UserSearchList user)
    {
        if (!selectedUsers.Any(u => u.UserId == user.UserId))
        {
            selectedUsers.Add(user);
            searchText = "";
        }
    }

    private void RemoveUser(UserSearchList user)
    {
        selectedUsers.Remove(user);
    }

    private async Task SubmitInvites()
    {
        var userIds = selectedUsers.Select(u => u.UserId).ToList();
        await _getProjectsService.InviteUsersToProject(ProjectId, userIds);

        selectedUsers.Clear();
        searchText = "";
        searchResults.Clear();

    }
}
