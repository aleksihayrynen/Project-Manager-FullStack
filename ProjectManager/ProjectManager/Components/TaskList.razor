@using ProjectManager.Models.Services
@using ProjectManager.Models
@using MongoDB.Bson;
@using ProjectManager.Models.Utils
@inject GetTaskService _getTaskService
@inject GetProjectsService _getProjectsService
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>TaskList</h3>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger blazor_error_message">
        <h3>@errorMessage</h3>
    </div>
}
<div class="table-scroll-container">
    <table class="tasktable">
        <thead>
            <tr class="tasktable_heading">
                <th>
                    Assigned
                </th>
                <th>
                    Title
                </th>
                <th>
                    Created By
                </th>
                <th>
                    Created date
                </th>
                <th>
                    Due Date
                </th>
                <th>
                    Status
                </th>
                <th>
                    Mark as done
                </th>
                <th>
                    Delete
                </th>
            </tr>
        </thead>
        <tbody>
            @if (taskitems != null)
            {
                @foreach (var item in taskitems)
                {
                    <tr>
                        <td>
                            @if (IsEditing(item._id.ToString()))
                            {
                                <select class="form-control" @bind="item.AssignedToString">
                                    @foreach (var member in projectInfo.Members)
                                    {
                                        <option value="@member.UserId"> @UtilityFunctions.CapitalizeFirstLetter(member.Username) - @UtilityFunctions.CapitalizeFirstLetter(member.FirstName) @UtilityFunctions.CapitalizeFirstLetter(member.LastName) </option>
                                    }
                                </select>
                            }
                            else
                            {
                                <div class="Assigned_flex">
                                    <div class="profilepicture_container_tasklist">
                                        <img class="profile_picture" src="/Media/flover.png" />
                                    </div>
                                    <p>@projectInfo.Members.FirstOrDefault( e => e.UserId == item.AssignedTo).Username </p>
                                </div>

                            }

                        </td>

                        <!-- Title -->
                        <td>
                            @if (IsEditing(item._id.ToString()))
                            {
                                <input type="text" class="form-control" @bind="item.Title" />
                            }
                            else
                            {
                                @item.Title
                            }
                        </td>

                        <!-- Created by not editable -->
                        <td>
                            <div class="Assigned_flex">
                                <div class="profilepicture_container_tasklist">
                                    <img class="profile_picture" src="/Media/flover.png" />
                                </div>
                                <p>@projectInfo.Members.FirstOrDefault(e => e.UserId == item.CreatedBy).Username </p>
                            </div>
                        </td>


                        <!-- Created Date (not editable) -->
                        <td>@item.CretedDate.ToLocalTime().ToString("d", System.Globalization.CultureInfo.CurrentCulture)</td>

                        <!-- Due Date -->
                        <td>
                            @if (IsEditing(item._id.ToString()))
                            {
                                <input type="date" class="form-control" @bind="item.DueDate" />
                            }
                            else
                            {
                                @item.DueDate.ToLocalTime().ToString("d", System.Globalization.CultureInfo.CurrentCulture)
                            }
                        </td>

                        <!-- State -->
                        <td>
                            @if (IsEditing(item._id.ToString()))
                            {
                                <select class="form-control" @bind="item.State">
                                    <option value="InProgress">In Progress</option>
                                    <option value="Completed">Completed</option>
                                    @if (projectInfo.UseReview == true)
                                    {
                                        <option value="InReview">In Review</option>
                                    }

                                </select>
                            }
                            else
                            {
                                @((MarkupString)GetTaskIconHtml(item))
                            }
                        </td>

                        <!-- Role logic for buttons not pretty ;D -->
                        @if (IsEditing(item._id.ToString()))
                        {
                            <td>

                            </td>
                            <td>
                                <button class="btn btn-sm btn-primary me-2" @onclick="() => SaveTask(item)">Save</button>
                                <button class="btn btn-sm btn-danger" @onclick="CancelEdit">Cancel</button>
                            </td>
                        }

                        else if (projectInfo.OpenCreate)
                        {
                            @if (taskToDelete != item)
                            {
                                <td>
                                    <button class="btn btn-success" @onclick="() => MarkTaskAsDone(item)">Done</button>

                                </td>
                                <td>
                                    <button class="btn btn-warning" @onclick="() => BeginEdit(item)">Edit</button>
                                    <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(item)">Delete</button>
                                </td>
                            }
                            else
                            {
                                <td></td>
                                <td>
                                    <button class="btn btn-danger" @onclick="() => ConfirmDelete()">Confirm Delete</button>
                                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                                </td>

                            }
                        }

                        else if (projectInfo.OpenCreate == false && userInfo.Role == "Member" && (item.State == TaskItem.TaskState.InReview || item.State == TaskItem.TaskState.Completed))
                        {
                            <td>
                                <p>In Review</p>
                            </td>
                        }

                        else if (projectInfo.OpenCreate == false && userInfo.Role == "Member")
                        {
                            <td>
                                <button class="btn btn-success" @onclick="() => MarkTaskAsDone(item)">Done</button>
                            </td>
                        }

                        else if (projectInfo.OpenCreate == false && userInfo.Role == "Owner")
                        {
                            @if (taskToDelete != item)
                            {
                                <td>
                                    <button class="btn btn-success" @onclick="() => MarkTaskAsDone(item)">Done</button>
                                </td>
                                <td>
                                    <button class="btn btn-warning" @onclick="() => BeginEdit(item)">Edit</button>
                                    <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(item)">Delete</button>
                                </td>
                            }
                            else
                            {
                                <td>
                                </td>
                                <td>
                                    <button class="btn btn-danger" @onclick="() => ConfirmDelete()">Confirm Delete</button>
                                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                                </td>

                            }
                        }
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td>No data</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    private List<TaskItem>? taskitems;
    private Project projectInfo;
    private string? userId;
    private ProjectMembers userInfo;
    private string? editTaskId = null;
    private TaskItem editedBackUp = null;
    private string? errorMessage;


    private TaskItem taskToDelete = null;


    @functions {
        bool IsEditing(string taskId) => editTaskId == taskId;
    }

    [Parameter]
    public string ProjectId { get; set; }

    protected override async Task OnInitializedAsync()
    {
    await FetchUserId();
    if (!string.IsNullOrEmpty(ProjectId) && ObjectId.TryParse(ProjectId, out var parsedId))
    {

        projectInfo = await _getProjectsService.GetProjectById(parsedId);
        userInfo = projectInfo.Members.FirstOrDefault(e => e.UserId.ToString() == userId);
        taskitems = await _getTaskService.GetTasksByProjectId(parsedId);

    }
    }


    private async Task FetchUserId()
    {
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    if (user.Identity != null && user.Identity.IsAuthenticated)
    {
        userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    }
    }

    async Task SaveTask(TaskItem task)
    {
        if (!projectInfo.OpenCreate && userInfo.Role == "Member") // Backend logic to stop normal users from using Save if they manage to use it somehow
        {
            editTaskId = null;
            editedBackUp = null;   
        }
        else
        {
            await _getTaskService.UpdateTask(task);
            editTaskId = null;
            editedBackUp = null;
        }
    }

    public async Task MarkTaskAsDone(TaskItem task)
    {
    if(projectInfo.UseReview && userInfo.Role == "Member") // Makes it people who review dont have to submit to review
    {
        task.State = TaskItem.TaskState.InReview;
        await SaveTask(task);
    }
    else
    {
        task.State = TaskItem.TaskState.Completed;  // WHen a other role than Member presses button the state should go to completed
        await SaveTask(task);
    }
    }

    void BeginEdit(TaskItem item)
    {
    if (!projectInfo.OpenCreate && userInfo.Role == "Member") // Backend logic to stop normal users from using Edit if they manage to use it somehow
    {
         // Maybe add error notice here
    }
    else
    {
        editedBackUp = new TaskItem
                {
                    _id = item._id,
                    Title = item.Title,
                    AssignedTo = item.AssignedTo,
                    DueDate = item.DueDate,
                    State = item.State
                };

        editTaskId = item._id.ToString();
    }
    }
    

    void CancelEdit()
    {
    // Revert the task to the backup values when editing is cancelled
    if (editedBackUp != null)
    {
        var taskToRevert = taskitems?.FirstOrDefault(task => task._id.ToString() == editTaskId);
        if (taskToRevert != null)
        {
            // Restore the original task item data from editedBackUp
            taskToRevert.Title = editedBackUp.Title;
            taskToRevert.AssignedTo = editedBackUp.AssignedTo;
            taskToRevert.DueDate = editedBackUp.DueDate;
            taskToRevert.State = editedBackUp.State;
        }
    }
    // Reset the edit mode
    editTaskId = null;
    }

    private void ShowDeleteConfirmation(TaskItem task)
    {
    taskToDelete = task;
    }

    private void CancelDelete()
    {
    taskToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (!projectInfo.OpenCreate && userInfo.Role == "Member") // Backend logic to stop normal users from using delete if they manage to use it somehow
        {
            taskToDelete = null;  // Maybe add error notice here
        }
        else
        {
            if (taskToDelete != null)
            {
                await _getTaskService.DeleteTask(taskToDelete);
                taskitems?.Remove(taskToDelete);
                taskToDelete = null;
            }
        }
    }
    
        

#region SvgMadness




    private readonly Dictionary<string, string> StateIcons = new()
    {
        ["Completed"] = @"<svg xmlns='http://www.w3.org/2000/svg' height='24px' viewBox='0 -960 960 960' width='24px' fill='#198754'>
                <path d='m424-296 282-282-56-56-226 226-114-114-56 56 170 170Zm56 216q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z' />
                </svg>",
        ["InReview"] = @"<svg xmlns='http://www.w3.org/2000/svg' height='24px' viewBox='0 -960 960 960' width='24px' fill='#4B77D1'>
                <path d='M440-220q125 0 212.5-87.5T740-520q0-125-87.5-212.5T440-820q-125 0-212.5 87.5T140-520q0 125 87.5 212.5T440-220Zm0-300Zm0 160q-83 0-147.5-44.5T200-520q28-70 92.5-115T440-680q82 0 146.5 45T680-520q-29 71-93.5 115.5T440-360Zm0-60q55 0 101-26.5t72-73.5q-26-46-72-73t-101-27q-56 0-102 27t-72 73q26 47 72 73.5T440-420Zm0-50q20 0 35-14.5t15-35.5q0-20-15-35t-35-15q-21 0-35.5 15T390-520q0 21 14.5 35.5T440-470Zm0 310q-75 0-140.5-28.5t-114-77q-48.5-48.5-77-114T80-520q0-74 28.5-139.5t77-114.5q48.5-49 114-77.5T440-880q74 0 139.5 28.5T694-774q49 49 77.5 114.5T800-520q0 67-22.5 126T715-287l164 165-42 42-165-165q-48 40-107 62.5T440-160Z' />
                </svg>",
        ["InProgress"] = @"<svg xmlns='http://www.w3.org/2000/svg' height='24px' viewBox='0 -960 960 960' width='24px' fill='#ffc107'>
                <path d='m40-120 440-760 440 760H40Zm138-80h604L480-720 178-200Zm302-40q17 0 28.5-11.5T520-280q0-17-11.5-28.5T480-320q-17 0-28.5 11.5T440-280q0 17 11.5 28.5T480-240Zm-40-120h80v-200h-80v200Zm40-100Z' />
                </svg>"
    };

    private string GetTaskIconHtml(TaskItem item)
    {
        // Check if the due date is before today
        if (item.DueDate.ToLocalTime() < DateTime.Today.ToLocalTime() && item.State == TaskItem.TaskState.InProgress)
        {
            return @"<svg xmlns='http://www.w3.org/2000/svg' height='24px' viewBox='0 -960 960 960' width='24px' fill='#dc3545'>
                            <path d='M480-280q17 0 28.5-11.5T520-320q0-17-11.5-28.5T480-360q-17 0-28.5 11.5T440-320q0 17 11.5 28.5T480-280Zm-40-160h80v-240h-80v240Zm40 360q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z' />
                            </svg>";
        }

        // Otherwise, return the state icon based on the task's state
        return StateIcons.TryGetValue(item.State.ToString(), out var svg)
            ? svg
            : ""; // Return empty string if no match found
            }
#endregion

}


